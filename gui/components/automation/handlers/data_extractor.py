# data_extractor.py
# Ubicaci√≥n: /syncro_bot/gui/components/automation/handlers/data_extractor.py
"""
Extractor especializado de datos de la tabla de resultados con funcionalidad
para obtener n√∫meros de serie de equipos. Hace doble clic en clientes, busca
en la tabla del popup las filas con "Unidad"="UND" y extrae el n√∫mero de serie.
"""

import time
from typing import List, Dict, Optional

# Importaciones para Selenium
try:
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    from selenium.webdriver.common.action_chains import ActionChains

    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False


class DataExtractor:
    """Extractor especializado de datos con funcionalidad para n√∫meros de serie de equipos"""

    def __init__(self, web_driver_manager, logger=None):
        self.web_driver_manager = web_driver_manager
        self.logger = logger

        # XPaths y selectores para la tabla de datos principal
        self.table_selectors = {
            'container': '.x-grid-item-container',
            'rows': 'table.x-grid-item',
            'cells': 'td.x-grid-cell'
        }

        # Mapeo de columnas seg√∫n el HTML proporcionado
        self.column_mapping = {
            'numero_orden': 'gridcolumn-1113',  # N√∫mero de Orden
            'cliente': 'gridcolumn-1115',  # Cliente (aqu√≠ haremos doble clic)
            'tecnico': 'gridcolumn-1121',  # T√©cnico
            'distrito': 'gridcolumn-1122',  # Distrito
            'barrio': 'gridcolumn-1123',  # Barrio
            'canton': 'gridcolumn-1124',  # Cant√≥n
            'fecha_creacion': 'gridcolumn-1132',  # Fecha creaci√≥n
            'observaciones': 'gridcolumn-1126',  # Observaciones
            'estado': 'gridcolumn-1112',  # Estado
            'despacho': 'gridcolumn-1116'  # Despacho
        }

        # XPath para el bot√≥n de retorno a la tabla principal
        self.return_button_xpath = '//*[@id="tab-1030-btnInnerEl"]'

        # Configuraci√≥n de timeouts
        self.data_wait_timeout = 15
        self.extraction_wait = 3
        self.popup_timeout = 10
        self.serie_extraction_delay = 2

    def _log(self, message, level="INFO"):
        """Log interno con fallback"""
        if self.logger:
            self.logger(message, level)
        else:
            print(f"[{level}] {message}")

    def extract_table_data(self, driver) -> tuple[bool, str, List[Dict]]:
        """Extrae todos los datos de la tabla incluyendo n√∫meros de serie de equipos"""
        try:
            self._log("üìä Iniciando extracci√≥n completa de datos (con n√∫meros de serie)...")

            # Esperar que aparezca la tabla con datos
            if not self._wait_for_data_table(driver):
                return False, "Tabla de datos no encontrada o no carg√≥", []

            # Obtener todas las filas de datos
            data_rows = self._get_table_rows(driver)
            if not data_rows:
                return False, "No se encontraron filas de datos en la tabla", []

            self._log(f"üìã Encontradas {len(data_rows)} filas de datos para extracci√≥n con n√∫meros de serie")

            # Extraer datos de cada fila (INCLUYE N√öMEROS DE SERIE)
            extracted_data = []
            for row_index, row_element in enumerate(data_rows):
                try:
                    row_data = self._extract_row_data_with_serie(driver, row_element, row_index)
                    if row_data:
                        extracted_data.append(row_data)
                        cliente_nombre = row_data.get('cliente', 'N/A')
                        numero_serie = row_data.get('numero_serie', 'Sin n√∫mero de serie')
                        self._log(f"‚úÖ Fila {row_index + 1} extra√≠da: {cliente_nombre} - Serie: {numero_serie}")
                    else:
                        self._log(f"‚ö†Ô∏è Fila {row_index + 1} no pudo ser extra√≠da", "WARNING")
                except Exception as e:
                    self._log(f"‚ùå Error extrayendo fila {row_index + 1}: {str(e)}", "ERROR")
                    continue

            if extracted_data:
                series_extracted = sum(1 for record in extracted_data
                                       if record.get('numero_serie') and
                                       record.get('numero_serie') not in ['Sin n√∫mero de serie', 'Error popup',
                                                                          'Error extracci√≥n', 'Campo no encontrado'])
                success_message = f"Extracci√≥n completa: {len(extracted_data)} registros, {series_extracted} n√∫meros de serie obtenidos"
                self._log(f"üéâ {success_message}")
                return True, success_message, extracted_data
            else:
                return False, "No se pudieron extraer datos de ninguna fila", []

        except Exception as e:
            error_msg = f"Error durante extracci√≥n completa: {str(e)}"
            self._log(error_msg, "ERROR")
            return False, error_msg, []

    def _extract_row_data_with_serie(self, driver, row_element, row_index: int) -> Optional[Dict]:
        """Extrae datos de una fila incluyendo el n√∫mero de serie mediante lectura de tabla del popup"""
        try:
            # PASO 1: Extraer datos b√°sicos normalmente
            row_data = self._extract_basic_row_data(row_element, row_index)
            if not row_data:
                return None

            # PASO 2: Obtener n√∫mero de serie mediante lectura de tabla del popup
            numero_serie = self._extract_serie_from_popup(driver, row_element, row_index)
            row_data['numero_serie'] = numero_serie

            return row_data

        except Exception as e:
            self._log(f"Error extrayendo datos completos de fila {row_index + 1}: {str(e)}", "ERROR")
            return None

    def _extract_serie_from_popup(self, driver, row_element, row_index: int) -> str:
        """Extrae el n√∫mero de serie leyendo la tabla del popup despu√©s del doble clic"""
        try:
            self._log(f"üî¢ Extrayendo n√∫mero de serie para fila {row_index + 1}...")

            # PASO 1: Encontrar la celda del cliente
            cliente_cell = self._find_client_cell(row_element)
            if not cliente_cell:
                self._log(f"‚ö†Ô∏è No se encontr√≥ celda de cliente en fila {row_index + 1}", "WARNING")
                return "Sin celda cliente"

            # PASO 2: Hacer scroll a la celda para asegurar visibilidad
            self.web_driver_manager.scroll_to_element(cliente_cell)
            time.sleep(0.5)

            # PASO 3: Ejecutar doble clic
            if not self._perform_double_click(driver, cliente_cell, row_index):
                return "Error en doble clic"

            # PASO 4: Esperar que aparezca el popup
            time.sleep(self.serie_extraction_delay)

            # PASO 5: Leer tabla del popup y extraer n√∫mero de serie
            numero_serie = self._read_serie_from_popup_table(driver, row_index)

            # PASO 6: Regresar a la tabla principal
            if not self._return_to_main_table(driver, row_index):
                self._log(f"‚ö†Ô∏è Advertencia: no se pudo regresar a tabla principal despu√©s de fila {row_index + 1}",
                          "WARNING")

            return numero_serie

        except Exception as e:
            self._log(f"‚ùå Error extrayendo n√∫mero de serie de fila {row_index + 1}: {str(e)}", "ERROR")
            # Intentar regresar a la tabla en caso de error
            try:
                self._return_to_main_table(driver, row_index)
            except:
                pass
            return "Error extracci√≥n"

    def _read_serie_from_popup_table(self, driver, row_index: int) -> str:
        """Lee la tabla del popup y extrae n√∫meros de serie donde Unidad='UND' - VERSI√ìN SIMPLIFICADA"""
        try:
            self._log(f"üìã Leyendo tabla del popup para fila {row_index + 1}...")

            # Esperar a que la tabla del popup est√© visible
            time.sleep(2)

            # M√âTODO DIRECTO: Buscar todas las filas de tablas en el popup
            try:
                # Buscar filas que contengan "UND" en cualquier celda
                rows_with_und = driver.find_elements(By.XPATH, "//tr[td//text()[contains(., 'UND')]]")

                if not rows_with_und:
                    self._log(f"‚ùå No se encontraron filas con 'UND' en popup de fila {row_index + 1}", "WARNING")
                    return "Sin UND encontrado"

                self._log(f"üîç Encontradas {len(rows_with_und)} filas con 'UND' en popup")

                # Para cada fila con UND, intentar extraer el n√∫mero de serie
                for fila_idx, row in enumerate(rows_with_und):
                    try:
                        # Obtener todas las celdas de la fila
                        cells = row.find_elements(By.TAG_NAME, "td")

                        if len(cells) < 9:
                            self._log(f"‚ö†Ô∏è Fila {fila_idx} tiene solo {len(cells)} celdas, necesita al menos 9",
                                      "DEBUG")
                            continue

                        # Verificar que realmente tenga "UND" en alguna celda
                        row_text = row.text.upper()
                        if "UND" not in row_text:
                            continue

                        # Extraer n√∫mero de serie de la celda 9 (√≠ndice 8)
                        try:
                            serie_cell = cells[8]  # td[9] = √≠ndice 8

                            # Buscar div dentro de la celda
                            serie_div = serie_cell.find_element(By.TAG_NAME, "div")
                            numero_serie = serie_div.text.strip()

                            # Validar que no est√© vac√≠o
                            if numero_serie and numero_serie not in ['', '&nbsp;', 'N/A']:
                                self._log(f"‚úÖ N√∫mero de serie encontrado en fila {fila_idx}: {numero_serie}")
                                return numero_serie
                            else:
                                self._log(f"‚ö†Ô∏è Celda 9 vac√≠a en fila {fila_idx}", "DEBUG")

                        except Exception as e:
                            self._log(f"‚ùå Error extrayendo de celda 9 en fila {fila_idx}: {str(e)}", "DEBUG")
                            continue

                    except Exception as e:
                        self._log(f"‚ùå Error procesando fila {fila_idx}: {str(e)}", "DEBUG")
                        continue

                # Si llegamos aqu√≠, no se encontr√≥ n√∫mero de serie v√°lido
                self._log(f"‚ö†Ô∏è No se encontr√≥ n√∫mero de serie v√°lido en popup de fila {row_index + 1}", "WARNING")
                return "Sin n√∫mero de serie v√°lido"

            except Exception as e:
                self._log(f"‚ùå Error buscando filas con UND: {str(e)}", "ERROR")

                # M√âTODO ALTERNATIVO: Usar XPath m√°s espec√≠fico como tu ejemplo
                try:
                    self._log("üîÑ Intentando m√©todo alternativo con XPath espec√≠fico...")

                    # Buscar tabla espec√≠fica del popup
                    popup_tables = driver.find_elements(By.XPATH, "//table[contains(@id, 'tableview')]")

                    if not popup_tables:
                        return "Sin tabla en popup"

                    for table in popup_tables:
                        try:
                            # Buscar filas dentro de esta tabla que tengan UND
                            table_rows = table.find_elements(By.XPATH, ".//tr[td//text()[contains(., 'UND')]]")

                            for row in table_rows:
                                cells = row.find_elements(By.TAG_NAME, "td")
                                if len(cells) >= 9:
                                    try:
                                        serie_cell = cells[8]
                                        numero_serie = serie_cell.text.strip()

                                        if numero_serie and numero_serie not in ['', '&nbsp;', 'N/A']:
                                            self._log(
                                                f"‚úÖ N√∫mero de serie encontrado (m√©todo alternativo): {numero_serie}")
                                            return numero_serie
                                    except:
                                        continue

                        except Exception as table_error:
                            self._log(f"Error en tabla espec√≠fica: {str(table_error)}", "DEBUG")
                            continue

                    return "Sin n√∫mero de serie (m√©todo alternativo)"

                except Exception as alt_error:
                    self._log(f"‚ùå Error en m√©todo alternativo: {str(alt_error)}", "ERROR")
                    return "Error m√©todo alternativo"

        except Exception as e:
            self._log(f"‚ùå Error leyendo tabla del popup fila {row_index + 1}: {str(e)}", "ERROR")
            return "Error lectura popup"

    # ========== M√âTODOS HEREDADOS DEL C√ìDIGO ORIGINAL ==========

    def _extract_basic_row_data(self, row_element, row_index: int) -> Optional[Dict]:
        """Extrae los datos b√°sicos de una fila (sin n√∫mero de serie)"""
        try:
            row_data = {
                'fila_numero': row_index + 1,
                'numero_orden': '',
                'cliente': '',
                'tecnico': '',
                'distrito': '',
                'barrio': '',
                'canton': '',
                'fecha_creacion': '',
                'observaciones': '',
                'estado': '',
                'despacho': '',
                'numero_serie': ''
            }

            # Extraer cada campo seg√∫n su columna
            for field_name, column_id in self.column_mapping.items():
                try:
                    cell_value = self._extract_cell_value(row_element, column_id)
                    row_data[field_name] = cell_value
                except Exception as e:
                    self._log(f"Error extrayendo {field_name}: {str(e)}", "DEBUG")
                    row_data[field_name] = ''

            # Verificar que al menos tengamos n√∫mero de orden
            if not row_data['numero_orden']:
                self._log(f"Fila {row_index + 1} descartada: sin n√∫mero de orden", "WARNING")
                return None

            return row_data

        except Exception as e:
            self._log(f"Error extrayendo datos b√°sicos de fila {row_index + 1}: {str(e)}", "ERROR")
            return None

    def _find_client_cell(self, row_element):
        """Encuentra la celda del cliente en la fila"""
        try:
            # Buscar la celda con el ID de columna del cliente
            cliente_cell = row_element.find_element(
                By.CSS_SELECTOR, f'td[data-columnid="{self.column_mapping["cliente"]}"]'
            )

            # Buscar el div interno que contiene el texto del cliente
            client_div = cliente_cell.find_element(By.CSS_SELECTOR, 'div.x-grid-cell-inner')

            # Verificar que tenga contenido
            if client_div.text.strip():
                return client_div
            else:
                return None

        except NoSuchElementException:
            return None
        except Exception as e:
            self._log(f"Error buscando celda de cliente: {str(e)}", "DEBUG")
            return None

    def _perform_double_click(self, driver, client_cell, row_index: int) -> bool:
        """Ejecuta el doble clic en la celda del cliente"""
        try:
            self._log(f"üñ±Ô∏è Ejecutando doble clic en cliente de fila {row_index + 1}...")

            # Crear ActionChains para doble clic
            actions = ActionChains(driver)
            actions.double_click(client_cell).perform()

            # Esperar un momento despu√©s del doble clic
            time.sleep(self.serie_extraction_delay)

            self._log(f"‚úÖ Doble clic ejecutado en fila {row_index + 1}")
            return True

        except Exception as e:
            self._log(f"‚ùå Error en doble clic de fila {row_index + 1}: {str(e)}", "ERROR")
            return False

    def _return_to_main_table(self, driver, row_index: int) -> bool:
        """Regresa a la tabla principal haciendo clic en el bot√≥n de pesta√±a"""
        try:
            self._log(f"üîÑ Regresando a tabla principal desde fila {row_index + 1}...")

            # Buscar el bot√≥n de retorno
            wait = WebDriverWait(driver, 10)
            return_button = wait.until(
                EC.element_to_be_clickable((By.XPATH, self.return_button_xpath))
            )

            # Hacer clic en el bot√≥n
            return_button.click()

            # Esperar que la tabla principal est√© visible de nuevo
            time.sleep(2)

            # Verificar que volvimos a la tabla
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, self.table_selectors['container']))
            )

            self._log(f"‚úÖ Regreso exitoso a tabla principal desde fila {row_index + 1}")
            return True

        except Exception as e:
            self._log(f"‚ùå Error regresando a tabla desde fila {row_index + 1}: {str(e)}", "ERROR")
            return False

    def _wait_for_data_table(self, driver) -> bool:
        """Espera que aparezca la tabla con datos"""
        try:
            self._log("‚è≥ Esperando que aparezca la tabla de datos...")
            wait = WebDriverWait(driver, self.data_wait_timeout)

            # Esperar el contenedor principal de la tabla
            container = wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, self.table_selectors['container']))
            )
            self._log("‚úÖ Contenedor de tabla encontrado")

            # Esperar que aparezcan filas de datos
            rows = wait.until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, self.table_selectors['rows']))
            )
            self._log(f"‚úÖ {len(rows)} filas de tabla encontradas")

            # Espera adicional para asegurar carga completa
            time.sleep(self.extraction_wait)

            return True

        except TimeoutException:
            self._log("‚ùå Timeout esperando tabla de datos", "ERROR")
            return False
        except Exception as e:
            self._log(f"‚ùå Error esperando tabla: {str(e)}", "ERROR")
            return False

    def _get_table_rows(self, driver) -> List:
        """Obtiene todas las filas de datos de la tabla"""
        try:
            # Buscar todas las filas de la tabla
            rows = driver.find_elements(By.CSS_SELECTOR, self.table_selectors['rows'])

            if not rows:
                self._log("‚ùå No se encontraron filas en la tabla", "WARNING")
                return []

            # Filtrar filas que realmente contienen datos
            data_rows = []
            for row in rows:
                try:
                    # Verificar que la fila tenga datos relevantes
                    if self._is_valid_data_row(row):
                        data_rows.append(row)
                except Exception as e:
                    self._log(f"Error validando fila: {str(e)}", "DEBUG")
                    continue

            self._log(f"üìä {len(data_rows)} filas v√°lidas encontradas de {len(rows)} totales")
            return data_rows

        except Exception as e:
            self._log(f"Error obteniendo filas: {str(e)}", "ERROR")
            return []

    def _is_valid_data_row(self, row_element) -> bool:
        """Verifica si una fila contiene datos v√°lidos"""
        try:
            # Buscar el n√∫mero de orden como indicador de fila v√°lida
            orden_cell = row_element.find_element(
                By.CSS_SELECTOR, f'td[data-columnid="{self.column_mapping["numero_orden"]}"]'
            )
            orden_text = orden_cell.text.strip()

            # Una fila es v√°lida si tiene n√∫mero de orden
            return bool(orden_text and orden_text != '&nbsp;')

        except NoSuchElementException:
            return False
        except Exception:
            return False

    def _extract_cell_value(self, row_element, column_id: str) -> str:
        """Extrae el valor de una celda espec√≠fica"""
        try:
            # Buscar la celda por su data-columnid
            cell = row_element.find_element(By.CSS_SELECTOR, f'td[data-columnid="{column_id}"]')

            # Buscar el div interno que contiene el texto
            inner_div = cell.find_element(By.CSS_SELECTOR, 'div.x-grid-cell-inner')

            # Obtener el texto y limpiarlo
            cell_text = inner_div.text.strip()

            # Limpiar caracteres especiales y espacios no deseados
            if cell_text == '&nbsp;' or cell_text == '':
                return ''

            return self._clean_cell_text(cell_text)

        except NoSuchElementException:
            # La celda no existe o est√° oculta
            return ''
        except Exception as e:
            self._log(f"Error extrayendo celda {column_id}: {str(e)}", "DEBUG")
            return ''

    def _clean_cell_text(self, text: str) -> str:
        """Limpia el texto extra√≠do de las celdas"""
        if not text:
            return ''

        # Limpiar espacios en blanco especiales
        text = text.replace('\xa0', ' ')
        text = text.replace('\u00a0', ' ')

        # Limpiar espacios m√∫ltiples
        text = ' '.join(text.split())

        # Remover caracteres de control
        text = ''.join(char for char in text if ord(char) >= 32 or char in '\t\n\r')

        return text.strip()

    def get_extraction_summary(self, extracted_data: List[Dict]) -> Dict:
        """Genera un resumen de los datos extra√≠dos incluyendo estad√≠sticas de n√∫meros de serie"""
        try:
            if not extracted_data:
                return {
                    'total_records': 0,
                    'fields_extracted': [],
                    'successful_extractions': 0,
                    'errors': 0,
                    'series_extracted': 0
                }

            # Contar registros v√°lidos
            valid_records = [record for record in extracted_data if record.get('numero_orden')]

            # Contar n√∫meros de serie extra√≠dos exitosamente
            series_extracted = 0
            series_errors = 0
            for record in valid_records:
                numero_serie = record.get('numero_serie', '')
                if numero_serie and numero_serie not in ['Sin n√∫mero de serie', 'Error extracci√≥n', 'Error popup',
                                                         'Error lectura popup', 'Sin tabla popup',
                                                         'Campo no encontrado']:
                    series_extracted += 1
                else:
                    series_errors += 1

            # Obtener campos que se extrajeron exitosamente
            fields_with_data = set()
            for record in valid_records:
                for field, value in record.items():
                    if value and field != 'fila_numero':
                        fields_with_data.add(field)

            # Contar por tipo de t√©cnico
            tecnicos = {}
            for record in valid_records:
                tecnico = record.get('tecnico', 'Sin especificar')
                tecnicos[tecnico] = tecnicos.get(tecnico, 0) + 1

            # Contar por distrito
            distritos = {}
            for record in valid_records:
                distrito = record.get('distrito', 'Sin especificar')
                distritos[distrito] = distritos.get(distrito, 0) + 1

            return {
                'total_records': len(extracted_data),
                'valid_records': len(valid_records),
                'fields_extracted': list(fields_with_data),
                'tecnicos_count': tecnicos,
                'distritos_count': distritos,
                'successful_extractions': len(valid_records),
                'errors': len(extracted_data) - len(valid_records),
                'series_extracted': series_extracted,
                'series_errors': series_errors,
                'extraction_method': 'popup_table_reading'
            }

        except Exception as e:
            self._log(f"Error generando resumen: {str(e)}", "ERROR")
            return {'error': str(e)}

    def validate_extracted_data(self, extracted_data: List[Dict]) -> tuple[bool, str]:
        """Valida que los datos extra√≠dos sean correctos incluyendo n√∫meros de serie"""
        try:
            if not extracted_data:
                return False, "No hay datos para validar"

            validation_results = []
            valid_count = 0

            for i, record in enumerate(extracted_data):
                record_issues = []

                # Validar n√∫mero de orden (obligatorio)
                if not record.get('numero_orden'):
                    record_issues.append("Falta n√∫mero de orden")

                # Validar que al menos tenga cliente o t√©cnico
                if not record.get('cliente') and not record.get('tecnico'):
                    record_issues.append("Falta cliente y t√©cnico")

                # Validar ubicaci√≥n (al menos distrito)
                if not record.get('distrito'):
                    record_issues.append("Falta informaci√≥n de distrito")

                # Validar n√∫mero de serie (advertencia, no error cr√≠tico)
                numero_serie = record.get('numero_serie', '')
                if not numero_serie or numero_serie in ['Sin n√∫mero de serie', 'Error extracci√≥n', 'Error popup']:
                    record_issues.append("Sin n√∫mero de serie extra√≠do")

                if record_issues:
                    validation_results.append(f"Registro {i + 1}: {', '.join(record_issues)}")
                else:
                    valid_count += 1

            if validation_results:
                issues_summary = f"Encontrados {len(validation_results)} registros con problemas: {'; '.join(validation_results[:3])}"
                if len(validation_results) > 3:
                    issues_summary += f" y {len(validation_results) - 3} m√°s..."

                if valid_count > 0:
                    return True, f"Validaci√≥n parcial exitosa: {valid_count}/{len(extracted_data)} registros v√°lidos. {issues_summary}"
                else:
                    return False, f"Validaci√≥n fall√≥: {issues_summary}"
            else:
                return True, f"Validaci√≥n exitosa: todos los {len(extracted_data)} registros son v√°lidos"

        except Exception as e:
            return False, f"Error durante validaci√≥n: {str(e)}"

    def _extract_basic_data_only(self, driver) -> tuple[bool, str, List[Dict]]:
        """Extrae solo datos b√°sicos sin hacer doble clic (para cuando no se necesita n√∫mero de serie)"""
        try:
            self._log("üìä Iniciando extracci√≥n b√°sica (sin n√∫meros de serie)...")

            if not self._wait_for_data_table(driver):
                return False, "Tabla de datos no encontrada", []

            data_rows = self._get_table_rows(driver)
            if not data_rows:
                return False, "No se encontraron filas de datos", []

            extracted_data = []
            for row_index, row_element in enumerate(data_rows):
                try:
                    row_data = self._extract_basic_row_data(row_element, row_index)
                    if row_data:
                        extracted_data.append(row_data)
                except Exception as e:
                    self._log(f"‚ùå Error extrayendo fila b√°sica {row_index + 1}: {str(e)}", "ERROR")
                    continue

            success_message = f"Extracci√≥n b√°sica completada: {len(extracted_data)} registros"
            return True, success_message, extracted_data

        except Exception as e:
            error_msg = f"Error durante extracci√≥n b√°sica: {str(e)}"
            self._log(error_msg, "ERROR")
            return False, error_msg, []

    def get_table_statistics(self, driver) -> Dict:
        """Obtiene estad√≠sticas de la tabla sin extraer todos los datos"""
        try:
            self._log("üìà Obteniendo estad√≠sticas de la tabla...")

            if not self._wait_for_data_table(driver):
                return {'error': 'Tabla no encontrada'}

            rows = self._get_table_rows(driver)

            stats = {
                'total_rows': len(rows),
                'table_present': True,
                'extraction_timestamp': time.time(),
                'serie_extraction_available': True,
                'extraction_method': 'popup_table_reading'
            }

            # Contar filas v√°lidas r√°pidamente
            valid_rows = 0
            for row in rows[:10]:  # Solo revisar las primeras 10 para estad√≠sticas r√°pidas
                if self._is_valid_data_row(row):
                    valid_rows += 1

            stats['estimated_valid_rows'] = valid_rows * (len(rows) / min(10, len(rows)))

            return stats

        except Exception as e:
            return {'error': str(e), 'table_present': False}

    def is_serie_extraction_available(self) -> bool:
        """Verifica si la extracci√≥n de n√∫meros de serie est√° disponible"""
        return True  # Siempre disponible ya que no depende de librer√≠as externas como OCR

    def get_extraction_info(self) -> Dict:
        """Obtiene informaci√≥n sobre el extractor de n√∫meros de serie"""
        return {
            'extraction_available': True,
            'extraction_method': 'popup_table_reading',
            'serie_support': True,
            'requires_double_click': True,
            'popup_support': True
        }